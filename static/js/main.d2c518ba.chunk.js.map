{"version":3,"sources":["Sorting/Algorithms/QuickSort.js","Sorting/Algorithms/BubbleSort.js","Sorting/Algorithms/MergeSort.js","Sorting/Algorithms/SelectionSort.js","Sorting/index.js","Sorting/Algorithms/InsertionSort.js","serviceWorker.js","index.js"],"names":["getQuickSortAnimations","array","animations","auxillaryArray","slice","quickSort","startIndex","endIndex","pivotIndex","min","max","Math","floor","random","push","swap","lessTailIndex","i","partitionArray","length","firstIndex","secondIndex","temp","getBubbleSortAnimations","iters","swapped","bubbleSort","getMergeSortAnimations","mergeSort","middleIndex","sortArray","j","merge","getSelectionSortAnimations","N","minIndex","selectionSort","SORT_TYPES","PRIMARY_COLOR","Sorting","state","quick","bubble","insertion","selection","heap","radix","bucket","durations","rank","this","randomizeArray","resetColors","resetBadges","setState","arrayBars","document","getElementsByClassName","style","backgroundColor","getElementById","toLowerCase","innerHTML","disabled","disableButtons","insertionSort","sortHelper","key","getInsertionSortAnimations","type","isColorChange","color","barOneIndex","barTwoIndex","barOneStyle","barTwoStyle","setTimeout","barIndex","newHeight","barStyle","height","RESTORE_TIME","parseInt","badge","enableButtons","console","log","className","id","onClick","startSorting","map","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d2c518ba.chunk.js","sourcesContent":["export function getQuickSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n    // const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    // console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    // array = auxillaryArray;\r\n    // return [animations, array];\r\n    return animations;\r\n}\r\n\r\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\r\n    let pivotIndex;\r\n    if (startIndex < endIndex) {\r\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\r\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\r\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\r\n    }\r\n}\r\n\r\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\r\n    let pivotIndex = randomIntFromInterval(startIndex, endIndex);\r\n    \r\n    animations.push([\"comparision1\", pivotIndex, endIndex]);\r\n    animations.push([\"swap\", pivotIndex, auxillaryArray[endIndex]]);\r\n    animations.push([\"swap\", endIndex, auxillaryArray[pivotIndex]]);\r\n    animations.push([\"comparision2\", pivotIndex, endIndex]);\r\n    swap(auxillaryArray, pivotIndex, endIndex);\r\n\r\n    let lessTailIndex = startIndex;\r\n\r\n    for(let i = startIndex; i < endIndex; ++i) {\r\n        animations.push([\"comparision1\", i, endIndex]);\r\n        animations.push([\"comparision2\", i, endIndex]);\r\n        if(auxillaryArray[i] <= auxillaryArray[endIndex]) {\r\n            animations.push([\"comparision1\", i, lessTailIndex]);\r\n            animations.push([\"swap\", i, auxillaryArray[lessTailIndex]]);\r\n            animations.push([\"swap\", lessTailIndex, auxillaryArray[i]]);\r\n            animations.push([\"comparision2\", i, lessTailIndex]);\r\n            swap(auxillaryArray, i, lessTailIndex);\r\n            lessTailIndex++;\r\n        }\r\n    }\r\n    animations.push([\"comparision1\", lessTailIndex, endIndex]);\r\n    animations.push([\"swap\", endIndex, auxillaryArray[lessTailIndex]]);\r\n    animations.push([\"swap\", lessTailIndex, auxillaryArray[endIndex]]);\r\n    animations.push([\"comparision2\", lessTailIndex, endIndex]);\r\n    \r\n    swap(auxillaryArray, lessTailIndex, endIndex);\r\n    return lessTailIndex;\r\n\r\n    // let pivot = auxillaryArray[endIndex];\r\n    // let pivotIndex = startIndex;\r\n    // for (let i = startIndex; i <= endIndex - 1; i++) {\r\n    //     animations.push([i, endIndex]);\r\n    //     animations.push([i, endIndex]);\r\n    //     if (auxillaryArray[i] <= pivot) {\r\n    //         //Swap these two heights\r\n    //         animations.push([i, auxillaryArray[pivotIndex]]);\r\n    //         animations.push([pivotIndex, auxillaryArray[i]]);\r\n    //         swap(auxillaryArray, i , pivotIndex);\r\n    //         pivotIndex++;\r\n    //     }\r\n    //     else {\r\n    //         animations.push([-1, -1]);\r\n    //         animations.push([-1, -1]);\r\n    //     }\r\n    //     animations.push([-1, -1]);\r\n    //     animations.push([-1, -1]);\r\n    // }\r\n    // animations.push([-1, -1]);\r\n    // animations.push([-1, -1]);\r\n    // animations.push([-1, -1]);\r\n    // animations.push([-1, -1]);\r\n    // //Swap these two heights\r\n    // animations.push([pivotIndex, auxillaryArray[endIndex]]);\r\n    // animations.push([endIndex, auxillaryArray[pivotIndex]]);\r\n    // swap(auxillaryArray, pivotIndex, endIndex);\r\n    // return pivotIndex;\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","export function getBubbleSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    bubbleSort(auxillaryArray, animations);\r\n    // const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    // console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    // array = auxillaryArray;\r\n    // return [animations, array];\r\n    return animations;\r\n}\r\n\r\nfunction bubbleSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    let iters = N - 1;\r\n    while(iters > 0) {\r\n        let swapped = false;\r\n        for(let i = 0; i < iters; ++i) {\r\n            animations.push([\"comparision1\", i, i + 1]);\r\n            animations.push([\"comparision2\", i, i + 1]);\r\n            if(auxillaryArray[i] > auxillaryArray[i + 1]) {\r\n                swapped = true;\r\n                animations.push([\"swap\", i, auxillaryArray[i + 1]]);\r\n                animations.push([\"swap\", i + 1, auxillaryArray[i]]);\r\n                swap(auxillaryArray, i, i + 1);\r\n            }\r\n        }\r\n        if(swapped === false) break;\r\n        iters--;\r\n    }\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n","export function getMergeSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    mergeSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    // const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    // console.log(arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    // array = auxillaryArray;\n    // return [animations, array];\n    return animations;\n}\n\nfunction mergeSort(auxillaryArray, startIndex, endIndex, animations) {\n    if(startIndex === endIndex)\n        return;\n    const middleIndex = Math.floor((startIndex + endIndex)/2);\n    mergeSort(auxillaryArray, startIndex, middleIndex, animations);\n    mergeSort(auxillaryArray, middleIndex + 1, endIndex, animations);\n    merge(auxillaryArray, startIndex, middleIndex, endIndex, animations);\n}\n\nfunction merge(auxillaryArray, startIndex, middleIndex, endIndex, animations) {\n    let sortArray = [];\n    let i = startIndex;\n    let j = middleIndex + 1;\n    while(i <= middleIndex && j <= endIndex) {\n        //Comparing value at ith and jth index so push them to change their color\n        animations.push([\"comparision1\", i, j]);\n        //By changing color we imply that we are comparing those two values and then again we should revert back to their original color so push them again\n        animations.push([\"comparision2\", i, j]);\n        if(auxillaryArray[i] <= auxillaryArray[j]) {\n            sortArray.push(auxillaryArray[i++]);\n        }\n        else {\n            sortArray.push(auxillaryArray[j++]);\n        }\n    }\n    while(i <= middleIndex) {\n        animations.push([\"comparision1\", i, i]);\n        animations.push([\"comparision2\", i, i]);\n        sortArray.push(auxillaryArray[i++]);\n    }\n    while(j <= endIndex) {\n        animations.push([\"comparision1\", j, j]);\n        animations.push([\"comparision2\", j, j]);\n        sortArray.push(auxillaryArray[j++]);\n    }\n    for (let i = startIndex; i <= endIndex; i++) {\n        animations.push([\"comparision1\", i, i - startIndex]);\n        animations.push([\"overwrite\", i, sortArray[i - startIndex]]);\n        animations.push([\"comparision2\", i, i - startIndex]);\n        auxillaryArray[i] = sortArray[i - startIndex];\n    }\n}\n","export function getSelectionSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    selectionSort(auxillaryArray, animations);\n    // const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    // console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    // array = auxillaryArray;\n    // return [animations, array];\n    return animations;\n}\n\nfunction selectionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        let minIndex = i; //Finding minimum element in unsorted array\n        for (let j = i + 1; j < N; j++) {\n            animations.push([\"comparision1\", j, minIndex]);\n            animations.push([\"comparision2\", j, minIndex]);\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\n                minIndex = j;\n            }\n        }\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\n        // Swap the found minimum element with the first element\n        swap(auxillaryArray, minIndex, i);\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n","import React, { Component } from 'react';\r\nimport { getQuickSortAnimations } from './Algorithms/QuickSort';\r\nimport { getBubbleSortAnimations } from './Algorithms/BubbleSort';\r\nimport { getInsertionSortAnimations } from './Algorithms/InsertionSort';\r\nimport { getMergeSortAnimations } from './Algorithms/MergeSort';\r\nimport { getSelectionSortAnimations } from './Algorithms/SelectionSort';\r\nimport './index.css';\r\n\r\nconst ANIMATION_SPEED_MS = 5;\r\n\r\nconst NUMBER_OF_ARRAY_BARS = 65;\r\nconst MAX_HEIGHT_OF_ARRAY_BARS = 100;\r\nconst MIN_HEIGHT_OF_ARRAY_BARS = 1;\r\n\r\nconst SORT_TYPES = ['Quick', 'Bubble', 'Merge', 'Insertion', 'Selection', 'Heap', 'Radix', 'Bucket'];\r\n\r\nconst PRIMARY_COLOR = 'MediumSpringGreen';\r\nconst SECONDARY_COLOR = 'crimson';\r\nconst TERTIARY_COLOR = 'Tomato';\r\nconst QUATERNARY_COLOR = 'red';\r\n\r\nclass Sorting extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            quick: [],\r\n            bubble: [],\r\n            merge: [],\r\n            insertion: [],\r\n            selection: [],\r\n            heap: [],\r\n            radix: [],\r\n            bucket: []\r\n        };\r\n        this.durations = [];\r\n        this.rank =0;\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.randomizeArray();\r\n    }\r\n\r\n    randomizeArray(){\r\n        this.resetColors();\r\n        this.resetBadges();\r\n        var array = [];\r\n        for (let i = 0;i < NUMBER_OF_ARRAY_BARS;i++) {\r\n            // array.push(200 + 10 * i); //pushing sorted increasing array\r\n            // array.push(500 - 5 * i); //pushing sorted decreasing array\r\n            array.push(Math.floor(Math.random() * MAX_HEIGHT_OF_ARRAY_BARS + MIN_HEIGHT_OF_ARRAY_BARS)); //random array\r\n        }\r\n        this.setState({quick: array, bubble: array, merge: array, insertion: array, selection: array, heap: array, radix: array, bucket: array});\r\n    }\r\n\r\n    resetColors(){\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for(let i = 0; i < arrayBars.length; i++){\r\n            arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n        }\r\n    }\r\n\r\n    resetBadges(){\r\n        this.rank = 0;\r\n        for(let i = 0; i < SORT_TYPES.length; i++){\r\n            document.getElementById(\"info-\"+SORT_TYPES[i].toLowerCase()).innerHTML = \"\";\r\n        }\r\n    }\r\n\r\n    enableButtons(){\r\n        document.getElementById(\"start-button\").disabled = false;\r\n        document.getElementById(\"rand-button\").disabled = false;\r\n    }\r\n\r\n    disableButtons(){\r\n        document.getElementById(\"start-button\").disabled = true;\r\n        document.getElementById(\"rand-button\").disabled = true;\r\n    }\r\n\r\n    startSorting(){\r\n        this.disableButtons();\r\n        this.quickSort();\r\n        this.bubbleSort();\r\n        this.mergeSort();\r\n        this.insertionSort();\r\n        this.selectionSort();\r\n        // this.heapSort();\r\n        // this.radixSort();\r\n        // this.bucketSort();\r\n    }\r\n\r\n    quickSort(){\r\n        const animations = getQuickSortAnimations(this.state.quick);\r\n        this.sortHelper(animations,\"Quick\");\r\n    }\r\n\r\n    bubbleSort() {\r\n        const animations = getBubbleSortAnimations(this.state.bubble);\r\n        this.sortHelper(animations,\"Bubble\");\r\n    }\r\n\r\n    mergeSort() {\r\n        const animations = getMergeSortAnimations(this.state.merge);\r\n        this.sortHelper(animations,\"Merge\");\r\n    }\r\n\r\n    insertionSort() {\r\n        const animations = getInsertionSortAnimations(this.state.insertion);\r\n        this.sortHelper(animations,\"Insertion\");\r\n    }\r\n\r\n    selectionSort(){\r\n        const animations = getSelectionSortAnimations(this.state.selection);\r\n        this.sortHelper(animations,\"Selection\");\r\n    }\r\n\r\n    sortHelper(animations, type){\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\r\n            const arrayBars = document.getElementsByClassName('array-bar '+type.toLowerCase());\r\n            if(isColorChange === true) {\r\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [swap, barIndex, newHeight] = animations[i];\r\n                if (barIndex === -1) {\r\n                    continue;\r\n                }\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                },i * ANIMATION_SPEED_MS);  \r\n            }\r\n        }\r\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length + 100);\r\n        const arrayBars = document.getElementsByClassName('array-bar '+type.toLowerCase());\r\n        for(let i = 0; i < arrayBars.length; i++){\r\n            setTimeout(() => arrayBars[i].style.backgroundColor = TERTIARY_COLOR, RESTORE_TIME);\r\n        }\r\n        // setTimeout(() => this.durations.push({type: type, time: RESTORE_TIME-100}), RESTORE_TIME-100);\r\n        // update badge\r\n        // this.setState({array: sortArray})\r\n        setTimeout(() => { var badge = (this.rank === 0)?'warning':((this.rank === 1)?'secondary':(this.rank === 2)? 'black': 'white'); document.getElementById(\"info-\"+type.toLowerCase()).innerHTML = \"<sup><i class='fa fa-star text-\"+badge+\"' ></i></sup>\"; this.rank++; if(this.rank===5){this.enableButtons();}   }, RESTORE_TIME-100);\r\n        console.log(type + \" Sort: Completed in \"+(RESTORE_TIME-100)+\" ms\");\r\n    }\r\n\r\n    render(){\r\n        const quick = this.state.quick;\r\n        const bubble = this.state.bubble;\r\n        const merge = this.state.merge;\r\n        const insertion = this.state.insertion;\r\n        const selection = this.state.selection;\r\n        const heap = this.state.heap;\r\n        const radix = this.state.radix;\r\n        const bucket = this.state.bucket;\r\n        return (\r\n            // Quick Sort.\r\n            // Bubble Sort.\r\n            // Merge Sort.\r\n            // Insertion Sort.\r\n            // Selection Sort.\r\n            // Heap Sort.\r\n            // Radix Sort.\r\n            // Bucket Sort.\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row align-items-center bg-dark p-2\">\r\n                    <div className=\"col-md-8\">\r\n                        <h4 className=\"text-white text-md-left text-center\" >SA Visualizer</h4>\r\n                        <small className=\"d-block text-white text-md-left text-center py-2\" >Developed with &hearts; by Tirtharaj Ghosh</small>\r\n                    </div>\r\n                    <div className=\"col-md-4 text-center\">\r\n                        <button id=\"rand-button\" className=\"btn btn-primary\" onClick={ () => this.randomizeArray()}> <i className=\"fa fa-refresh\"></i> Randomize</button>\r\n                        &nbsp;\r\n                        <button id=\"start-button\" className=\"btn btn-success\" onClick={ () => this.startSorting()}> <i className=\"fa fa-play\"></i> Start</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row align-items-center\">\r\n                    <div className=\"col-md-6\">\r\n                        <div className=\"array-container\" >\r\n                            {quick.map((value, id) => (\r\n                                <div\r\n                                    className=\"array-bar quick\"\r\n                                    key={id}\r\n                                    style={{\r\n                                    backgroundColor: PRIMARY_COLOR,\r\n                                    height: `${value}px`\r\n                                    }}\r\n                                ></div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"text-center\">\r\n                            Quick Sort <span id=\"info-quick\"></span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-6\">\r\n                        <div className=\"array-container\" >\r\n                            {bubble.map((value, id) => (\r\n                                <div\r\n                                    className=\"array-bar bubble\"\r\n                                    key={id}\r\n                                    style={{\r\n                                    backgroundColor: PRIMARY_COLOR,\r\n                                    height: `${value}px`\r\n                                    }}\r\n                                ></div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"text-center\">\r\n                            Bubble Sort <span id=\"info-bubble\"></span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row align-items-center\">\r\n                    <div className=\"col-md-6\">\r\n                        <div className=\"array-container\" >\r\n                            {merge.map((value, id) => (\r\n                                <div\r\n                                    className=\"array-bar merge\"\r\n                                    key={id}\r\n                                    style={{\r\n                                    backgroundColor: PRIMARY_COLOR,\r\n                                    height: `${value}px`\r\n                                    }}\r\n                                ></div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"text-center\">\r\n                            Merge Sort <span id=\"info-merge\"></span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-6\">\r\n                        <div className=\"array-container\" >\r\n                            {insertion.map((value, id) => (\r\n                                <div\r\n                                    className=\"array-bar insertion\"\r\n                                    key={id}\r\n                                    style={{\r\n                                    backgroundColor: PRIMARY_COLOR,\r\n                                    height: `${value}px`\r\n                                    }}\r\n                                ></div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"text-center\">\r\n                            Insertion Sort <span id=\"info-insertion\"></span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row align-items-center\">\r\n                    <div className=\"col-md-6\">\r\n                        <div className=\"array-container\" >\r\n                            {selection.map((value, id) => (\r\n                                <div\r\n                                    className=\"array-bar selection\"\r\n                                    key={id}\r\n                                    style={{\r\n                                    backgroundColor: PRIMARY_COLOR,\r\n                                    height: `${value}px`\r\n                                    }}\r\n                                ></div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"text-center\">\r\n                            Selection Sort <span id=\"info-selection\"></span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-6\">\r\n                        <div className=\"array-container\" >\r\n                            {heap.map((value, id) => (\r\n                                <div\r\n                                    className=\"array-bar heap\"\r\n                                    key={id}\r\n                                    style={{\r\n                                    backgroundColor: PRIMARY_COLOR,\r\n                                    height: `${value}px`\r\n                                    }}\r\n                                ></div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"text-center\">\r\n                            Heap Sort <span id=\"info-heap\"></span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row align-items-center\">\r\n                    <div className=\"col-md-6\">\r\n                        <div className=\"array-container\" >\r\n                            {radix.map((value, id) => (\r\n                                <div\r\n                                    className=\"array-bar radix\"\r\n                                    key={id}\r\n                                    style={{\r\n                                    backgroundColor: PRIMARY_COLOR,\r\n                                    height: `${value}px`\r\n                                    }}\r\n                                ></div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"text-center\">\r\n                            Radix Sort <span id=\"info-radix\"></span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-6\">\r\n                        <div className=\"array-container\" >\r\n                            {bucket.map((value, id) => (\r\n                                <div\r\n                                    className=\"array-bar bucket\"\r\n                                    key={id}\r\n                                    style={{\r\n                                    backgroundColor: PRIMARY_COLOR,\r\n                                    height: `${value}px`\r\n                                    }}\r\n                                ></div>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"text-center\">\r\n                            Bucket Sort <span id=\"info-bucket\"></span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Sorting;\r\n","export function getInsertionSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    insertionSort(auxillaryArray, animations);\r\n    // const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    // console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    // array = auxillaryArray;\r\n    // return [animations, array];\r\n    return animations;\r\n}\r\n\r\nfunction insertionSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    for (let i = 1; i < N; i++) {\r\n        let key = auxillaryArray[i];\r\n        let j = i - 1;\r\n        animations.push([\"comparision1\", j, i]);\r\n        animations.push([\"comparision2\", j, i]);\r\n        while(j >= 0 && auxillaryArray[j] > key) {\r\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\r\n            auxillaryArray[j + 1] = auxillaryArray[j];\r\n            j = j - 1;\r\n            if(j >= 0) {\r\n                animations.push([\"comparision1\", j, i]);\r\n                animations.push([\"comparision2\", j, i]);\r\n            }     \r\n        }\r\n        animations.push([\"overwrite\", j + 1, key]);\r\n        auxillaryArray[j + 1] = key;\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Sorting from './Sorting';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Sorting />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}